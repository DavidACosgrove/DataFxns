id: d358bb04-ed05-4693-9a9b-5dd0da4fc8c3
name: RXN Pair Finder
description: Select reactant and product compound pairs in the input data table using a reaction. The reaction must include atom maps.
category: python-local.chem.2D
version: 1.0.0
serviceName: ReactionTableSearch
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: reactionQuery
    label: Reaction query
    type: molecule
    sketcherContentType: chemical/x-mdl-rxnfile
    molTypes:
    - extension: .sma
      contentType: chemical/x-smarts
      name: SMARTS (*.sma)
    - extension: .rxn
      contentType: chemical/x-mdl-rxnfile
      name: RXN file (*.rxn)
  request:
    id: reactionQuery
    dataType: string
    contentType: chemical/x-mdl-rxnfile
- control:
    id: structureColumn
    label: Select structure column
    type: columnselect
    filters:
    - dataType:
      - string
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
      - chemical/x-smiles
      - chemical/x-daylight-smiles
    - dataType: binary
      contentType:
      - chemical/x-mdl-molfile
      - chemical/x-mdl-molfile-v3000
    validationRules:
    - type: required
      message: Must select column of 2D structures
  request:
    id: structureColumn
    dataType: string
    selectorType: column
- control:
    id: idColumn
    label: ID column
    type: columnselect
    multi: !!bool false
    filters:
      - dataType: int
      - dataType: string
    validationRules:
    - type: required
  request:
    id: idColumn
    dataType: string
    selectorType: column
- control:
    id: propertyColumns
    label: Property columns
    type: columnselect
    multi: !!bool true
    tooltip: Select columns containing properties
    validationRules:
    - type: oneOrMoreRequired
      message: ''
    filters:
    - dataType:
      - double
      - int
      - float
      - long
  request:
    id: propertyColumns
    dataType: list(string)
    selectorType: column
assembly: 
- text: chemistry
  color: '#50AF28'
- color: '#f7cb2d'
  text: search
ironPython: |
  ####################################################
  #  Copyright 2022 Glysade LLC, All Rights Reserved #
  ####################################################

  import sys,clr
  from Spotfire.Dxp.Data import DataTable, DataManager
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  import Spotfire.Dxp.Application.PanelCollection

  from System import AppDomain
  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts':
          clr.AddReference(asm.FullName)

  from Charts import ChartsModel
  model_type = ChartsModel

  #tableId pass in args
  dataTable = ResultTables[0]

  if not dataTable:
      raise Exception('target table not found')

  page = Document.Pages.AddNew('Blast (local) text query Results')
  panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

  for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False
          

  filteringScheme = Document.FilteringSchemes[0]
  page.FilterPanel.FilteringSchemeReference = filteringScheme

  tableVis = page.Visuals.AddNew[model_type]()
  tableVis.SetKeyValue('visualization','table-visualization')
  tableVis.DataTable = dataTable
  tableVis.ConfigureColumns()
  tableVis.Marking = Document.Data.Markings.DefaultMarkingReference

  tableVis.SetActiveVisual()
  page.AutoConfigure() 
updateBehavior: automatic
maximumOutputColumns: !!int 0
maximumOutputTables: !!int 1
chemistryFunction: !!bool false
tkid: 
script: 
outputFields: 
allowedClients:
- Analyst
- WebPlayer
