id: f029862d-9c37-463b-e732-3561998d60a6
name: Ab Component Analysis
description: Creates analysis of property changes in one part of an antibody while other parts are held constant
category: Biopolymer
version: 1.0.0
serviceName: AbComponentAnalysis
serviceUri: glysade.python
executorId: Glysade.CPythonDataFxn
inputFields:
- control:
    id: sequenceColumns
    label: Select sequence columns
    type: columnselect
    filters:
    - dataType: string
      contentType: chemical/x-sequence
    - dataType: binary
      contentType: chemical/x-genbank
    validationRules:
    - type: oneOrMoreRequired
      message: ''
    multi: !!bool true
  request:
    id: sequenceColumns
    dataType: list(string)
    selectorType: column
- control:
    id: idColumn
    label: ID column
    type: columnselect
    multi: !!bool false
    validationRules:
    - type: required
      message: ''
    filters:
    - dataType:
      - string
      - int
      contentType: []
    tooltip: Used to identify origin of data in output
  request:
    id: idColumn
    dataType: string
    selectorType: column
- control:
    id: dataColumns
    label: Data columns
    type: columnselect
    multi: !!bool true
    validationRules:
    - type: oneOrMoreRequired
      message: ''
    filters:
    - dataType:
      - double
      - float
      - decimal
      - int
      - long
      contentType: []
  request:
    id: dataColumns
    dataType: list(string)
    selectorType: column
- control:
    id: gapMismatch
    label: Gap mismatch penalty
    type: text
    validationRules:
    - type: numeric
      message: ''
  request:
    id: gapMismatch
    dataType: float
    data: !!int -1
assembly: 
tags:
- color: '#dddddd'
  text: MAB
- color: '#337abc'
  text: sequence
- color: '#ba660b'
  text: analyze
ironPython: |
  ################################################################
  #  Copyright 2022 Glysade LLC, All Rights Reserved             #
  ################################################################

  import sys,clr
  from Spotfire.Dxp.Data import DataTable, DataManager
  from Spotfire.Dxp.Application import PanelTypeIdentifiers
  from Spotfire.Dxp.Application import Panel
  import Spotfire.Dxp.Application.PanelCollection
  from System import AppDomain

  for asm in AppDomain.CurrentDomain.GetAssemblies():
      if asm.GetName().Name == 'Charts':
          clr.AddReference(asm.FullName)

  from Charts import ChartsModel
  model_type = ChartsModel

  #tableId pass in args
  dataTable = ResultTables[0]

  if not dataTable:
      raise Exception('target table not found')

  page = Document.Pages.AddNew('Ab Component Analysis Results')
  panelsToHide = [PanelTypeIdentifiers.DataPanel, PanelTypeIdentifiers.DetailsOnDemandPanel]

  for panel in page.Panels:
      if panel.TypeId in panelsToHide:
          if panel.Visible:
              panel.Visible = False


  filteringScheme = Document.FilteringSchemes[0]
  page.FilterPanel.FilteringSchemeReference = filteringScheme
  # dataTable = Document.ActiveDataTableReference
  # filterCollection = filteringScheme[dataTable]

  tableVis = page.Visuals.AddNew[model_type]()
  tableVis.SetKeyValue('visualization','table-visualization')
  tableVis.DataTable = dataTable
  tableVis.ConfigureColumns()
  tableVis.Marking = Document.Data.Markings.DefaultMarkingReference

  tableVis.SetActiveVisual()
  page.AutoConfigure()
updateBehavior: automatic
maximumOutputColumns: !!int 0
maximumOutputTables: !!int 1
chemistryFunction: !!bool false
tkid: 
script: 
outputFields: 
allowedClients:
- Analyst
- WebPlayer
demoUrl: 
limitBy: none
